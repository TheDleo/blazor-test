@page "/cityweather"

@using BlazorServerCRUD.Web.Data
@inject IWeatherForecastService ForecastService

<h1>City Weather Forecast</h1>

<div class="row mb-3">
    <div class="col-md-4">
        <div class="input-group">
            <select class="form-select" @bind="selectedCity">
                <option value="">Select a city...</option>
                <option value="Seattle">Seattle</option>
                <option value="Phoenix">Phoenix</option>
                <option value="Chicago">Chicago</option>
                <option value="Miami">Miami</option>
            </select>
            <button class="btn btn-primary" @onclick="GetForecast" disabled="@string.IsNullOrEmpty(selectedCity)">
                Get Forecast
            </button>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex align-items-center">
        <div class="spinner-border text-primary me-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span>Loading forecast...</span>
    </div>
}
else if (currentForecast != null)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Weather in @selectedCity</h5>
            <div class="row">
                <div class="col-md-6">
                    <p class="mb-1"><strong>Date:</strong> @currentForecast.Date.ToShortDateString()</p>
                    <p class="mb-1"><strong>Temperature:</strong> @currentForecast.TemperatureC°C / @currentForecast.TemperatureF°F</p>
                    <p class="mb-1"><strong>Conditions:</strong> @currentForecast.Summary</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string selectedCity = "";
    private WeatherForecast currentForecast;
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task GetForecast()
    {
        if (string.IsNullOrEmpty(selectedCity))
        {
            errorMessage = "Please select a city";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";
            currentForecast = await ForecastService.GetForecastForCityAsync(selectedCity, DateTime.Now);
        }
        catch (KeyNotFoundException)
        {
            errorMessage = $"Weather data not available for {selectedCity}";
            currentForecast = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error getting forecast: {ex.Message}";
            currentForecast = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}
